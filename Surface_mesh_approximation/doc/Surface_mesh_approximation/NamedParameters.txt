/*!
\defgroup namedparameters Named Parameters
\ingroup PkgTSMA

\cgalHeading{How to use BGL Optional Named Parameters}

This page contains similar content to the named parameters introduced in \ref PkgPolygonMeshProcessingSummary.

The notion of named parameters was introduced in the BGL.
You can read about it in the following site: http://www.boost.org/libs/graph/doc/bgl_named_params.html.
Named parameters allow the user to specify only those parameters which are really needed, by name, making the parameter ordering unimportant.

Say there is a function `f()` that takes 3 parameters called name, age and gender, and you have variables `n`, `a` and `g` to pass as parameters to that function. Without named parameters, you would call it like this: `f(n,a,g)`, whereas with named parameters, you call it like this: `f(name(n).age(a).gender(g))`.

That is, you give each parameter a name by wrapping it into a function whose name matches that of the parameter. The entire list of named parameters is really a composition of function calls separated by a dot ( .). Thus, if the function takes a mix of mandatory and named parameters, you use a comma to separate the last non-named parameter from the first named parameters, like this:

`f(non_named_par0, non_named_par1, name(n).age(a).gender(g))`

When you use named parameters, the ordering is irrelevant, so `f(name(n).age(a).gender(g))` is equivalent to `f(age(a).gender(g).name(n))`, and you can just omit any named parameter that has a default value.

The sequence of named parameters should start with `CGAL::VSA::parameters::`.

\cgalHeading{Example}

See below a sample call of a function that uses the optional BGL named parameters.

\code
// input : input triangle mesh to be approximated
// output : output polyhedron mesh
// method : seed initialization method
// num_proxies : number of proxies used to approximate the geometry
// num_iterations : number of relaxation iterations
// anchors : the container to store the anchor points
vsa_mesh_approximation(input,
       , output
       , CGAL::VSA::parameters::init_method(method)
       .init_by_number(num_proxies)
       .iterations(num_iterations)
       .anchor_point(std::back_inserter(anchors)));
\endcode

\cgalHeading{List of Available Named Parameters}

In this package, all functions optional parameters are implemented as BGL optional named parameters and listed below.

In the following, we assume that the following types are provided as template parameters of surface mesh approximation functions and classes. Note that, for some of these functions, the type is more specific.

<ul>
<li>`PolygonMesh` implements a `FaceGraph`
<li>`GeomTraits` a geometric traits class in which constructions are performed and predicates evaluated. Everywhere in this package, a \cgal `Kernel` fulfills the requirements.
</ul>

Here is the list of the named parameters available in this package:

\cgalNPTableBegin

\cgalNPBegin{geom_traits} \anchor VSA_geom_traits
 the geometric traits instance in which the mesh processing operation should be performed.\n
\b Type: a Geometric traits class.\n
\b Default type is
\code
typename CGAL::Kernel_traits<
  typename boost::property_traits<
    typename boost::property_map<PolygonMesh, CGAL::vertex_point_t>::type>::value_type>::Kernel
\endcode
\cgalNPEnd

\cgalNPBegin{vertex_point_map} \anchor VSA_vertex_point_map
 is the property map with the points associated to the vertices of the polygon mesh `pmesh`.\n
\b Type: a class model of `ReadablePropertyMap` with
`boost::graph_traits<PolygonMesh>::%vertex_descriptor` as key type and
`GeomTraits::Point_3` as value type. \n
\b Default value is \code boost::get(CGAL::vertex_point, pmesh)\endcode
\cgalNPEnd

\cgalNPBegin{init_method} \anchor VSA_init_method
the selection of seed initialization method, `0` for random, `1` for incremental, `2` for hierarchical\n
\b Type : \c int \n
\b Default value is `0`
\cgalNPEnd

\cgalNPBegin{init_by_number} \anchor VSA_init_by_number
the number of proxies used to approximate the input mesh.\n
\b Type : `std::size_t` \n
\b Default value is `0`
\cgalNPEnd

\cgalNPBegin{init_by_error} \anchor VSA_init_by_error
the total error drop to approximate the input mesh.\n
\b Type : `GeomTraits::FT` \n
\b Default value is `0.01`
\cgalNPEnd

\cgalNPBegin{iterations} \anchor VSA_iterations
the number of iterations of relaxation after seeding.\n
\b Type : `std::size_t` \n
\b Default value is `10`
\cgalNPEnd

\cgalNPBegin{inner_iterations} \anchor VSA_inner_iterations
the number of iterations of relaxation interleaved within seeding.\n
\b Type : `std::size_t` \n
\b Default value is `10`
\cgalNPEnd

\cgalNPBegin{chord_subdivide} \anchor VSA_chord_subdivide
the chord subdivision threshold used in the meshing step.\n
\b Type : `GeomTraits::FT` \n
\b Default value is `1`
\cgalNPEnd

\cgalNPBegin{face_proxy_map} \anchor VSA_face_proxy_map
the property map outputs the proxy index of each face of the input polygon mesh.\n
\b Type: a class model of `ReadWritePropertyMap` with `boost::graph_traits<PolygonMesh>::%face_descriptor` as key type and the value type `std::size_t`
\b Default : if this parameter is omitted, no output operation performed
\cgalNPEnd

\cgalNPBegin{proxies} \anchor VSA_proxies
an `OutputIterator` to write proxies in.\n
\b Type : a class model of `OutputIterator` with `CGAL::PlaneProxy<GeomTraits>` value type.\n
\b Default : if this parameter is omitted, no output operation performed
\cgalNPEnd

\cgalNPBegin{anchor_vertex} \anchor VSA_anchor_vertex
an `OutputIterator` to write anchor vertex in.\n
\b Type : a class model of `OutputIterator` with `boost::graph_traits<PolygonMesh>::%vertex_descriptor` value type.\n
\b Default : if this parameter is omitted, no output operation performed
\cgalNPEnd

\cgalNPBegin{anchor_point} \anchor VSA_anchor_point
an `OutputIterator` to write anchor point in.\n
\b Type : a class model of `OutputIterator` with `GeomTraits::Point_3` value type.\n
\b Default : if this parameter is omitted, no output operation performed
\cgalNPEnd

\cgalNPBegin{indexed_triangles} \anchor VSA_indexed_triangles
an `OutputIterator` to write the approximation triangles in.\n
\b Type : a class model of `OutputIterator` with `std::size_t` value type.\n
\b Default : if this parameter is omitted, no output operation performed
\cgalNPEnd

\cgalNPTableEnd

*/
