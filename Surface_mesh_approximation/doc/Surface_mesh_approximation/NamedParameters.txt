/*!
\defgroup namedparameters Named Parameters
\ingroup PkgTSMA

\cgalHeading{How to use BGL Optional Named Parameters}

This page contains similar content to the named parameters introduced in \ref PkgPolygonMeshProcessingSummary.

The notion of named parameters was introduced in the BGL.
Details can be found from: http://www.boost.org/libs/graph/doc/bgl_named_params.html.
Named parameters allow the user to specify only those parameters which are really needed, by name, making the parameter ordering not required.

Assume a function `f()` that takes 3 parameters referred to as name, age and gender, and variables `n`, `a` and `g` to pass as parameters to that function. Without named parameters, we would call the function as `f(n,a,g)`, whereas with named parameters, we call it as `f(name(n).age(a).gender(g))`.

More specifically, we give each parameter a name by wrapping it into a function whose name matches that of the parameter. The entire list of named parameters is a composition of function calls separated by a dot (.). Thus, if the function takes a mix of mandatory and named parameters, we must use a comma to separate the last non-named parameter from the first named parameters, like this:

`f(non_named_par0, non_named_par1, name(n).age(a).gender(g))`

When using named parameters, the ordering is irrelevant, so that `f(name(n).age(a).gender(g))` is equivalent to `f(age(a).gender(g).name(n))`, and we can omit any named parameter that has a default value.

The sequence of named parameters should start with `CGAL::VSA::parameters::`.

\cgalHeading{Example}

See below a sample call of a function that uses the optional BGL named parameters.

\code
// tm: input triangle mesh to be approximated
// method: seed initialization method
// nb_proxies: number of proxies used to approximate the geometry
// nb_iterations: number of iterations after initialization
// points: output anchor points
// triangles: output triplets of indexed triangles

CGAL::mesh_approximation(tm,
    CGAL::VSA::parameters::seeding_method(method).
        max_nb_proxies(nb_proxies).
        nb_of_iterations(nb_iterations).
        anchor_points(std::back_inserter(points)).
        indexed_triangles(std::back_inserter(triangles)));
\endcode

\cgalHeading{List of Available Named Parameters}

In this package, all functions optional parameters are implemented as BGL optional named parameters and listed below.

In the following, we assume that the following types are provided as template parameters of surface mesh approximation functions and classes. Note that the type is more specific for some of these functions.

<ul>
<li>`TriangleMesh` implements a `FaceListGraph`
<li>`GeomTraits` a geometric traits class in which constructions are performed and predicates evaluated. Everywhere in this package, a \cgal `Kernel` fulfills the requirements.
</ul>

Here is the list of the named parameters available in this package:

\cgalNPTableBegin

\cgalNPBegin{geom_traits} \anchor VSA_geom_traits
 the geometric traits instance in which the mesh processing operation should be performed.\n
\b Type: a Geometric traits class.\n
\b Default type is
\code
typename CGAL::Kernel_traits<
  typename boost::property_traits<
    typename boost::property_map<TriangleMesh, CGAL::vertex_point_t>::type>::value_type>::Kernel
\endcode
\cgalNPEnd

\cgalNPBegin{vertex_point_map} \anchor VSA_vertex_point_map
 is the property map with the points associated to the vertices of the polygon mesh `pmesh`.\n
\b Type: a class model of `ReadablePropertyMap` with
`boost::graph_traits<TriangleMesh>::%vertex_descriptor` as key type and
`GeomTraits::Point_3` as value type. \n
\b Default value is \code boost::get(CGAL::vertex_point, pmesh)\endcode
\cgalNPEnd

\cgalNPBegin{seeding_method} \anchor VSA_seeding_method
the selection of seeding method.\n
\b Type : \c CGAL::Seeding \n
\b Default value is `CGAL::Seeding::Hierarchical`
\cgalNPEnd

\cgalNPBegin{max_nb_proxies} \anchor VSA_max_nb_proxies
the maximum number of proxies used to approximate the input mesh.\n
\b Type : `boost::optional<std::size_t>` \n
\b Default value is `boost::none`
\cgalNPEnd

\cgalNPBegin{min_error_drop} \anchor VSA_min_error_drop
the minimum total error drop to approximate the input mesh.\n
\b Type : `boost::optional<GeomTraits::FT>` \n
\b Default value is `0.1`
\cgalNPEnd

\cgalNPBegin{nb_of_iterations} \anchor VSA_nb_of_iterations
the number of partitioning and fitting iterations after seeding.\n
\b Type : `std::size_t` \n
\b Default value is `std::min(std::max(nb_of_facets / max_nb_proxies, 20), 60)`
\cgalNPEnd

\cgalNPBegin{nb_of_relaxations} \anchor VSA_nb_of_relaxations
the number of relaxations interleaved within seeding.\n
\b Type : `std::size_t` \n
\b Default value is `5`
\cgalNPEnd

\cgalNPBegin{mesh_chord_error} \anchor VSA_mesh_chord_error
the chord subdivision threshold used in the meshing step.\n
\b Type : `GeomTraits::FT` \n
\b Default value is `5.0`
\cgalNPEnd

\cgalNPBegin{face_proxy_map} \anchor VSA_face_proxy_map
the property map outputs the proxy index of each face of the input polygon mesh.\n
\b Type: a class model of `ReadWritePropertyMap` with `boost::graph_traits<TriangleMesh>::%face_descriptor` as key type and the value type `std::size_t`\n
\b Default : if this parameter is omitted, no output operation performed
\cgalNPEnd

\cgalNPBegin{proxies} \anchor VSA_proxies
an `OutputIterator` to write proxies in.\n
\b Type : a class model of `OutputIterator` with `CGAL::PlaneProxy<GeomTraits>` value type.\n
\b Default : if this parameter is omitted, no output operation performed
\cgalNPEnd

\cgalNPBegin{anchor_points} \anchor VSA_anchor_points
an `OutputIterator` to write anchor points in.\n
\b Type : a class model of `OutputIterator` with `boost::graph_traits<TriangleMesh>::%vertex_descriptor` value type.\n
\b Default : if this parameter is omitted, no output operation performed
\cgalNPEnd

\cgalNPBegin{indexed_triangles} \anchor VSA_indexed_triangles
an `OutputIterator` to write indexed triangles in.\n
\b Type : a class model of `OutputIterator` with `CGAL::cpp11::array<std::size_t, 3>` value type.\n
\b Default : if this parameter is omitted, no output operation performed
\cgalNPEnd

\cgalNPTableEnd

*/
