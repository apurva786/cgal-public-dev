-- regular triangulations
For some optimizations, as well as for sharp edges, periodic regular
triangulations will be required. 

<Status> Not yet supported

=== meeting Misha-Mariette-Monique, March 10, 2011

--- dummy points currently have dim -1 
(this creates a problem if a dummy pont is on the surface) 
- initialize the mesh domain in the oracle
- add more dummy points or move them if necesssary
- give them the true dimension (2 or 3)
- In fact the exterior could/should also be meshed in the periodic
setting. To be defined in the oracle (multidomain). Does this create a
real loss of efficiency? At least Lloyd and ODT would work. 

<Status> Almost completed. BUT At the meeting on 4th of Aug we decided
to go the other way.

--- in optimizations
replace calls to v->point() by dt.point(v)
as done by manuel for periodic alpha shapes

<Status> Canceled. 
<Commentary> No needs to do this in the optimization stage
and it implies some changes in the package Mesh_3.
But it's done in the mesh criteria 

--- traits
- Mariette is looking at some specific questions in Mesh_3:
in is_facet_encroached, use compare_distance instead of
compute_squared_distance
- then a periodic version of compare_distance (weighted version) could
be provided

<Status> Completed.

=== general

the code should work with CGAL 3.8, so that we can give it to
M. Moesen as soon at it is good enough

<Status> Completed.

=== meeting Mikhail-Mariette-Monique-Laurent, April 18, 2011

Problems with optimization phase.

--- Side_of_power_sphere(Cell, point)

Offset is required

<Status> Completed

- investiagte Manuel's code related with find_conflicts etc
Did he avoid this problem? Probably he works with 8 copies.

<Status> Completed

- Laurent can do the following change in Mesh_3: using Tr::point(cell_handle, i)
instead of cell_handle->vertex(i)->point().
That's just a step which can make our problem less complicated.

<Status> Canceled.

--- Set of "moving" vertices.

Problem: all the "moving" points must be inside the domain at the beginning of optimization phase.

- Mariette will have a look at the code

<Substatus> Done.

- Add filtering whether a vertex inside or not (perhaps using subdomain indices or dimensions)    

<Substatus> Done.

- Decided not to move the dummy points.

<Substatus> In progress.

- Dummy points must be assigned by appropriate subdomain indices, by dimensions at the beginning of the algorithm. Figure out how the mesher uses subdomain indices and dimensions of vertices. 

<Substatus> Done.

hint:
set_subdomain_index();
set_index();

<Status> In progress. See the report below.

--- Dummy points must be far from the surface of the domain

Idea by Olivier for the dummy points:
Find a set of spheres that covers the domain with the property that if we chose one point in each sphere at random the point set will have a triangulation in 1-cover. Now if a new point is inserted, find the spheres it is contained in and remove the corresponding dummy point. 

- Olivier's proposition

<Status> In progress

=== meeting Mikhail-Mariette-Monique- Jean-Daniel, Aug 4, 2011

--- Idea by Olivier for the dummy points:

<MY>
 To find such a set of spheres, I though that we can start with a set of dummy points
satisfying a  stronger condition   that Manuel'ones.
For instances if we start with a set points satsfying the fact that the longest
Delaunay edge is 0.4 and then then set up spheres as sphere with radius 0.1.
Hummh, not sure that this works in the end ....

It works if we generate the set of dummy points as a packing :
Lets imagine we have a packing of spheres with radius r,
then the spheres with same center and radii 2r form a covering
and we are sure that any edge with length more than 2r 
can't be Delaunay.

Assume now that center points are free to move
in small sphere of radii $\delta r$,
then we still have covering spheres with radii $(2+\delta)r$
and therefore any edge with lenght more
tan $(2 + \delta)r$ can't be Delaunay.

So if we choose $r$ and $\delta$ such that
$(2+\delta)r \le$ Manuel's bound,
we are done.
<\MY>

- Compute the radiuses of the balls

--- dummy points, stop "moving" dummy points

By now, 
the dummy points are initilized through the oracle,
the dummy points are assigned by appropriate subdomain indices, by dimensions (3 or -1 by default) at the beginning
they can be projected to the surface at the end of refinement process
they do not move if we assign the dimension 0 or 1.

What to do:
"PeriodicMeshDomain" must wrap MeshDomainWithFeatures_3 implicitly.
Consider the exterior as also a domain which probably does not have needs to be refined.  
Dummy points are corners (i.e 0-dimensional features)
Where it's possible substitute dummy points by refining points (if they  are inside the corresponding balls of the dummy points)
Incident graph?

<MY>
Assuming that dummy points are corner points  (i.e 0-dimensional features)
and that "PeriodicMeshDomain" ia a model of MeshDomainWithFeatures_3
implies that we have the incidence graph,
at leat the part we care of,
through the functions :
bool 	md.are_incident_surface_patch_corner ( Surface_patch_index spi, Corner_index ci)
		Returns true if the corner with index ci is incident to the surface patch with index spi. 
</MY>

=== Aug 12, 2011

Mesh_domain_with_corners_3 is a "model" of MeshDomainWithFeatures_3,
but it doesn't work with 1-dimensional features: 

The member get_curve_segments returns iterator to the empty conatiner.
The members like geodesic_distance throw assert(false).

This class works with 0-dimensional features:
The member are_incident_surface_patch_corner is not supported
since this member is not called by Mesheres. No places where this member can be called. The model Mesh_domain_wuth_polyline_features_3 doesn't support this member as well.

At the same time Mesh_domain_with_corners_3 is a model of MeshDomain_3. 

We add dummy points to the domain as corners. These corners will be inserted to
c3t3 (complex that constraines the triangualtion) by the standard function
"insert_corners" somewhere during the initialization of the complex.

By now I divide the domain into the subdomains with index 1 (points inside) and 2 (points are outside). 
Both subdomains are refined. But in fact we are not interested in refinment of
the external subdomain. That's why in the example I use "Sizing field". It's a parameter that defines how to refine the cells of different domains.
Using this parameter we can see that the external mesh is rough refined, the cells are quite massive. That's what we need actually.
I'm going to hide the parameter dealing with the external subdomain from the user.

I have made some small changes in duplicate files of Mesh_3:

First, I give an explanation of the small problem, after
that I will explain what I've changed a bit in Mesh_3:

1) We insert dummy points to the triangulation in advance.

2) There is a process of initialization of the complex (and triangulation respectively) when the corners(dummy points) of the domain get inserted to the complex.

It means that we insert dummy points twice! But, yes, the number of vertices of the triangulation is still left the same (36).
When we insert a point second time
the assertion comes out, which I just commented:

#warning uncomment
  //CGAL_assertion ( c3t3_.triangulation().number_of_vertices() == (nb_vertices_before+1) ); 

This assert is in Protect_edges_sizing_field<C3T3, MD, Sf>::
insert_point (Insertion of a corner to the triangualtion corresponding to c3t3)

There is another one assertion which I also commented for a while.

=== meeting Mikhail-Mariette, Sep 6, 2011

--- Dummy points as corners

- There is a member "are_incident_surface_patch_corner" documented in the concept MeshDomainWithFeatures_3. I checked the models of MeshDomainWithFeatures_3, the package Mesh_3: there is no any mention of this member. If the algorithm  uses this member, then it has to be provided by our model "MeshDomainWithCorners".
Mariette will check whether it calls or has to be called.

- Idea of Mariette about packings and covering to generate dummy points and corresponding balls of radius delta (see above)
Packing can be computed using Voronoi diagram..

Later, when the dummy points can move within the delta-balls (balls of radius delta), 
we want to know the nearest points on the surface with respect to some dummy points that 
are very close to the surface. It allows us to replace these dummy points by the nearest points on the surface.
How it can be performed:
1) If the surface is defined by an implicit function:
 Gradient descent or smth like that
2) If polyhedral surfaces:
AABB trees.

- insertion of a dummy point occurs twice: as a dummy point, as corner.

==== meeting Mikhail, Mariette, Jean-Daniel

- We find dummy points that are close to the surface.
Project them to the surface. Compute the maximum diameter of empty balls.
If the max diameter becomes longer then we insert the projected point in the triangulation, otherwise we throw away the dummy point and consider the projected point as a dummy point.

- uncomment the criteria that checks if all the vertices of a face are on the surface.

- move dummy points within the corresponding delta balls.
there is a bad place in "lloyd" that has to be adapted: a vertex is on the surface.

- document the changes in the package with comparison to Mesh_3.

- document the features of the current algorithm (dimensions and indices of the dummy points etc)

- that would be nice to finish writinig the above things down by the new year.

- next meeting is planning to be at the end of january. One of the question is
to start writing "regular periodic triangulations". One of the reason is to maintain the work with features in our package as it is in Mesh_3. 
